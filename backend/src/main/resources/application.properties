spring.application.name=backend
server.port=8080
# Postgres Config
# spring.datasource.url=${DATABASE_URL}
# spring.datasource.username=${DATABASE_USERNAME}
# spring.datasource.password=${DATABASE_PASSWORD}
# spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:postgresql://localhost:5432/bike_rent
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.jpa.hibernate.ddl-auto=update

# File config
spring.servelt.multipart.max-file-size=5MB
spring.servelt.multipart.max-request-size=10MB
media.location=mediafiles

# Keycloak config
# spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/bike-rent-realm
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/bike-rent-realm/protocol/openid-connect/certs
jwt.auth.converter.resource-id=admin-client
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8180/realms/bike-rent-realm
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8180/realms/bike-rent-realm/protocol/openid-connect/certs
jwt.auth.converter.resource-id=admin-client

#Nombre del claim el cual usa keycloak para identificar un token
jwt.auth.converter.principle-attribute=preferred_username
logging.level.org.keycloak=DEBUG
logging.level.org.springframework.security=DEBUG

